// @generated by protobuf-ts 1.0.13
// @generated from protobuf file "index.proto" (syntax proto3)
// tslint:disable
import { BinaryWriteOptions } from "@protobuf-ts/runtime";
import { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import { BinaryReadOptions } from "@protobuf-ts/runtime";
import { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import JSBI from 'jsbi'
/**
 * @generated from protobuf message Meta
 */
export interface Meta {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string type = 2;
     */
    type: string;
    /**
     * @generated from protobuf field: uint64 size = 3;
     */
    size: any;
    /**
     * @generated from protobuf field: int64 lastModified = 4;
     */
    lastModified: any;
    /**
     * @generated from protobuf field: optional bytes preview = 5;
     */
    preview?: Uint8Array;
}
/**
 * @generated from protobuf message Chunk
 */
export interface Chunk {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: optional uint64 skip = 2;
     */
    skip?: any;
    /**
     * @generated from protobuf field: optional uint64 limit = 3;
     */
    limit?: any;
}
/**
 * @generated from protobuf message Request
 */
export interface Request {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "meta";
        /**
         * @generated from protobuf field: string meta = 1;
         */
        meta: string;
    } | {
        oneofKind: "receive";
        /**
         * @generated from protobuf field: Chunk receive = 2;
         */
        receive: Chunk;
    } | {
        oneofKind: "send";
        /**
         * @generated from protobuf field: Meta send = 3;
         */
        send: Meta;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message File
 */
export interface File {
    /**
     * @generated from protobuf field: Meta meta = 1;
     */
    meta?: Meta;
    /**
     * @generated from protobuf field: string contentPath = 2;
     */
    contentPath: string;
}
/**
 * Type for protobuf message Meta
 */
class Meta$Type extends MessageType<Meta> {
    constructor() {
        super("Meta", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "size", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: JSBI.BigInt(0) /*LongType.BIGINT*/ },
            { no: 4, name: "lastModified", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: JSBI.BigInt(0) /*LongType.BIGINT*/ },
            { no: 5, name: "preview", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<Meta>): Meta {
        const message = { name: "", type: "", size: 0n, lastModified: 0n };
        if (value !== undefined)
            reflectionMergePartial<Meta>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Meta): Meta {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string type */ 2:
                    message.type = reader.string();
                    break;
                case /* uint64 size */ 3:
                    message.size = JSBI.BigInt(reader.uint64());
                    break;
                case /* int64 lastModified */ 4:
                    message.lastModified = JSBI.BigInt(reader.uint64());
                    break;
                case /* optional bytes preview */ 5:
                    message.preview = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Meta, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string type = 2; */
        if (message.type !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.type);
        /* uint64 size = 3; */
        if (message.size !== 0n)
            writer.tag(3, WireType.Varint).uint64(message.size);
        /* int64 lastModified = 4; */
        if (message.lastModified !== 0n)
            writer.tag(4, WireType.Varint).int64(message.lastModified);
        /* optional bytes preview = 5; */
        if (message.preview !== undefined)
            writer.tag(5, WireType.LengthDelimited).bytes(message.preview);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
export const Meta = new Meta$Type();
/**
 * Type for protobuf message Chunk
 */
class Chunk$Type extends MessageType<Chunk> {
    constructor() {
        super("Chunk", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "skip", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: JSBI.BigInt(0) /*LongType.BIGINT*/ },
            { no: 3, name: "limit", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: JSBI.BigInt(0) /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<Chunk>): Chunk {
        const message = { id: "" };
        if (value !== undefined)
            reflectionMergePartial<Chunk>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Chunk): Chunk {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* optional uint64 skip */ 2:
                    message.skip = JSBI.BigInt(reader.uint64());
                    break;
                case /* optional uint64 limit */ 3:
                    message.limit = JSBI.BigInt(reader.uint64());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Chunk, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* optional uint64 skip = 2; */
        if (message.skip !== undefined)
            writer.tag(2, WireType.Varint).uint64(message.skip);
        /* optional uint64 limit = 3; */
        if (message.limit !== undefined)
            writer.tag(3, WireType.Varint).uint64(message.limit);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
export const Chunk = new Chunk$Type();
/**
 * Type for protobuf message Request
 */
class Request$Type extends MessageType<Request> {
    constructor() {
        super("Request", [
            { no: 1, name: "meta", kind: "scalar", oneof: "type", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "receive", kind: "message", oneof: "type", T: () => Chunk },
            { no: 3, name: "send", kind: "message", oneof: "type", T: () => Meta }
        ]);
    }
    create(value?: PartialMessage<Request>): Request {
        const message = { type: { oneofKind: undefined } };
        if (value !== undefined)
            reflectionMergePartial<Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request): Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string meta */ 1:
                    message.type = {
                        oneofKind: "meta",
                        meta: reader.string()
                    };
                    break;
                case /* Chunk receive */ 2:
                    message.type = {
                        oneofKind: "receive",
                        receive: Chunk.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).receive)
                    };
                    break;
                case /* Meta send */ 3:
                    message.type = {
                        oneofKind: "send",
                        send: Meta.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).send)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string meta = 1; */
        if (message.type.oneofKind === "meta")
            writer.tag(1, WireType.LengthDelimited).string(message.type.meta);
        /* Chunk receive = 2; */
        if (message.type.oneofKind === "receive")
            Chunk.internalBinaryWrite(message.type.receive, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* Meta send = 3; */
        if (message.type.oneofKind === "send")
            Meta.internalBinaryWrite(message.type.send, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
export const Request = new Request$Type();
/**
 * Type for protobuf message File
 */
class File$Type extends MessageType<File> {
    constructor() {
        super("File", [
            { no: 1, name: "meta", kind: "message", T: () => Meta },
            { no: 2, name: "contentPath", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<File>): File {
        const message = { contentPath: "" };
        if (value !== undefined)
            reflectionMergePartial<File>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: File): File {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Meta meta */ 1:
                    message.meta = Meta.internalBinaryRead(reader, reader.uint32(), options, message.meta);
                    break;
                case /* string contentPath */ 2:
                    message.contentPath = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: File, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Meta meta = 1; */
        if (message.meta)
            Meta.internalBinaryWrite(message.meta, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string contentPath = 2; */
        if (message.contentPath !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contentPath);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
export const File = new File$Type();
